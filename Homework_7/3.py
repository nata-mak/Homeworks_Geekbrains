# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и целочисленное (с округлением до целого) деление клеток, соответственно.

# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.

# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.

# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, part_cell):
        self.part_cell = int(part_cell)

    def __str__(self):
        return f'Клетка с количеством ячеек: {self.part_cell}'

    def __add__(self, other):
        sum_cells = self.part_cell + other.part_cell
        return Cell(sum_cells)

    def __sub__(self, other):
        sub_cells = self.part_cell - other.part_cell
        if sub_cells > 0:
            return Cell(sub_cells)
        else:
            return f'Вычитание клеток выполнить невозможно!'
    def __mul__(self, other):
        mul_cells = self.part_cell * other.part_cell
        return Cell(mul_cells)

    def __truediv__(self, other):
        tr_cells = round(self.part_cell / other.part_cell)
        return Cell(tr_cells)

    def make_order(self, len_str):
        num_lines = int(self.part_cell / len_str)
        while num_lines > 0:
            print(f'{"*" * len_str}')
            num_lines -= 1
        else:
            return f'{"*" * (self.part_cell % len_str)}'

cell_1 = Cell(8)
cell_2 = Cell(10)

sum_cells = cell_1 + cell_2
print(sum_cells)

sub_cells = cell_1 - cell_2
print(sub_cells)

mul_cells = cell_1 * cell_2
print(mul_cells)

tr_cells = cell_1 / cell_2
print(tr_cells)

print(cell_1.make_order(5))
print(cell_2.make_order(3))
